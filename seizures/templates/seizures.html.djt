{% load bootstrap5 %}
{% load static %}
<!DOCTYPE html>
<html lang="en">

    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8">
        <meta name="robots" content="noimageindex, nofollow, nosnippet">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="{% static 'favicon.ico' %}" rel="shortcut icon" type="image/vnd.microsoft.icon">
        <link href="{% static 'style.css' %}" rel="stylesheet" type="text/css">
        {% bootstrap_css %}
        <title>Eric's Seizures</title>
        {% bootstrap_javascript %}
    {% if seizures %}
        {% if device_icons %}
        {{ device_icons | json_script:"device-icons" }}
        {% endif %}
        {{ seizures | json_script:"seizures" }}
        <script>
            const deviceIcons = JSON.parse(document.getElementById("device-icons").textContent);
            const seizureData = JSON.parse(JSON.parse(document.getElementById("seizures").textContent));

            // Count seizures
            var seizureCount = Object.keys(seizureData).length;

            // Start with empty markers, infoWindows, latitudes, and longitudes
            var markers = [];
            var infoWindows = [];
            var latitudes = [];
            var longitudes = [];

            // Google map init function
            var map;
            function initMap() {

                // Set map zoom closer if there is only a single seizure
                var mapZoom = 12;
                if (seizureCount == 1) {
                    var mapZoom = 18;
                };

                // Create the map at the average middle point
                map = new google.maps.Map(
                    document.getElementById('map-canvas'), {
                        zoom: mapZoom,
                        maxZoom: 19
                    }
                );

                // Iterate through each seizure JSON object
                for (const seizure of Object.values(seizureData)) {

                    // Get the icon for the seizure
                    const deviceIcon = deviceIcons[seizure.fields.device_type];

                    // Parse the seizure timestamp into a JavaScript Date
                    const jsDate = new Date(seizure.pk);
                    const titleDate = jsDate.toLocaleTimeString(
                        'en-us', {
                            weekday: 'long',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                        }
                    );

                    // List seizures with types and timestamps as titles
                    const titleText = seizure.fields.device_type + ' ' + deviceIcon + ' ' + titleDate;
                    const unixTime = jsDate.getTime();
                    const utcDate = jsDate.toUTCString();
                    const listNode = document.createElement('li');
                    listNode.className = 'list-group-item';
                    const textNode = document.createTextNode(titleText);
                    const linkNode = document.createElement('a');
                    linkNode.appendChild(textNode);
                    linkNode.title = titleText;
                    linkNode.href = '#' + unixTime;
                    linkNode.onclick = function() { markerOpen(unixTime); };
                    listNode.appendChild(linkNode);
                    document.getElementById('seizure-list').appendChild(listNode);

                    // Append to latitudes and longitudes
                    latitudes.push(Number(seizure.fields.latitude));
                    longitudes.push(Number(seizure.fields.longitude));

                    // Create a content string for each Google Map marker infoWindow
                    var contentString = '<table class="table">';
                    contentString += '<tr>';
                    contentString += '<th class="text-center" colspan="2" title="Time: ' + titleDate + '"><a href="#' + unixTime + '">' + titleDate + '</a>' + deviceIcon + '</th>';
                    contentString += '</tr>';
                    if (seizure.fields.address) {
                        contentString += '<tr title="Address: ' + seizure.fields.address + '"><td>Address</td><td>' + seizure.fields.address + '</td></tr>';
                    };
                    if (seizure.fields.altitude) {
                        contentString += '<tr title="Altitude: ' + parseFloat(seizure.fields.altitude) + ' ft"><td>Altitude</td><td>' + parseFloat(seizure.fields.altitude) + ' ft</td></tr>';
                    };
                    if (seizure.fields.battery) {
                        contentString += '<tr title="Battery: ' + parseFloat(seizure.fields.battery) + '%"><td>Battery</td><td>' + parseFloat(seizure.fields.battery) + '%</td></tr>';
                    };
                    if (seizure.fields.brightness) {
                        contentString += '<tr title="Brightness: ' + parseFloat(seizure.fields.brightness*100) + '%"><td>Brightness</td><td>' + parseFloat(seizure.fields.brightness*100) + '%</td></tr>';
                    };
                    contentString += '<tr title="Coordinates: ' + seizure.fields.latitude + ', ' + seizure.fields.longitude + '"><td>Coordinates</td><td>' + seizure.fields.latitude + ', ' + seizure.fields.longitude + '</td></tr>';
                    if (seizure.fields.ssid) {
                        contentString += '<tr title="SSID: ' + seizure.fields.ssid + '"><td>SSID</td><td>' + seizure.fields.ssid + '</td></tr>';
                    };
                    contentString += '<tr title="UTC: ' + utcDate + '"><td>UTC</td><td>' + utcDate + '</td></tr>';
                    if (seizure.fields.volume) {
                        contentString += '<tr title="Volume: ' + parseFloat(seizure.fields.volume*100) + '%"><td>Volume</td><td>' + parseFloat(seizure.fields.volume*100) + '%</td></tr>';
                    };
                    contentString += '</table>';

                    // Create an infoWindow for each seizure marker on the map
                    infoWindows[unixTime] = new google.maps.InfoWindow(
                        {
                            content: contentString
                        }
                    );

                    // Create a Google Map marker for each seizure on the map
                    markers[unixTime] = new google.maps.Marker(
                        {
                            position: {
                                lat: Number(seizure.fields.latitude),
                                lng: Number(seizure.fields.longitude),
                            },
                            map,
                            title: titleText
                        }
                    );

                    // Click to close other windows, and open this infoWindow
                    markers[unixTime].addListener(
                        'click', () => {
                            closeWindows(infoWindows);
                            infoWindows[unixTime].open(
                                {
                                    anchor: markers[unixTime],
                                    map,
                                    shouldFocus: true
                                }
                            );
                        }
                    );
                };

                // Set center of map using average coordinates
                const centerLatitude = latitudes.reduce((partialSum, lat) => partialSum + lat, 0);
                const centerLongitude = longitudes.reduce((partialSum, lng) => partialSum + lng, 0);
                map.setCenter(
                    new google.maps.LatLng(centerLatitude, centerLongitude)
                );

                // Set map bounds based on minimum and maximum coordinates
                map.fitBounds(
                    new google.maps.LatLngBounds(
                        new google.maps.LatLng(
                            Math.min(...latitudes),
                            Math.min(...longitudes)
                        ),
                        new google.maps.LatLng(
                            Math.max(...latitudes),
                            Math.max(...longitudes)
                        )
                    )
                );

                // Open info window for a marker if its key is in the anchor tag
                if (window.location.hash.substr(1)) {
                    markerOpen(window.location.hash.substr(1));
                };

                // If there is only a single marker, open its infoWindow
                if (Object.keys(markers).length == 1) {
                    markerOpen(Object.keys(markers)[0]);
                };
            }; // End initMap function

            // Function to close all infoWindows on all markers
            function closeWindows(infoWindows) {
                if (infoWindows) {
                    for (const window of Object.keys(infoWindows)) {
                        infoWindows[window].close();
                    };
                };
            };

            // Function to open infoWindow on a marker by the unixTime key
            function markerOpen(unixTime) {
                google.maps.event.trigger(markers[unixTime], 'click');
            };
        </script>
        {% if googlemaps_api_key %}
        <script async defer src="https://maps.googleapis.com/maps/api/js?key={{ googlemaps_api_key }}&callback=initMap"></script>
        {% endif %}
    {% endif %}
    </head>
    <body>

        <nav class="navbar navbar-expand-lg">
            <div class="container-fluid">
                <a href="#" id="logo"></a>
                <a class="navbar-brand text-primary" href="{% url 'index' %}" id="logo-text">Eric's Seizures</a>
                <a href="#" id="logo-rev"></a>
            </div>
        </nav>

        <main class="container" id="content">
            <div class="container">

                <div class="row">
        {% if seizures %}
                    <div class="col-8">
                        <div class="container" id="left-box">
            {% if previous_day or next_day %}
                            <div class="container">
                {% if previous_day %}
                                <a href="{% url 'day' year=previous_day|date:'Y' month=previous_day|date:'m' day=previous_day|date:'j' %}">{{ previous_day }}</a>
                {% endif %}
                {% if previous_day and next_day %}--{% endif %}
                {% if next_day %}
                                <a href="{% url 'day' year=next_day|date:'Y' month=next_day|date:'m' day=next_day|date:'j' %}">{{ next_day }}</a>
                {% endif %}
                            </div>
            {% endif %}

                            <div class="container">
            {% if previous_month or next_month %}
                {% if previous_month %}
                                <a href="{% url 'month' year=previous_month|date:'Y' month=previous_month|date:'m' %}">{{ previous_month|date:'F Y' }}</a>
                {% endif %}
                {% if next_month %}
                                <a href="{% url 'month' year=next_month|date:'Y' month=next_month|date:'m' %}">{{ next_month|date:'F Y' }}</a>
                {% endif %}
            {% else %}
                {% now 'Y' as current_year %}
                {% now 'm' as current_month %}
                                <a href="{% url 'month' year=current_year month=current_month %}">{% now 'F' %} {{ current_year }}</a>
            {% endif %}
                            </div>

                            <div class="container-fluid">
            {% if previous_year or next_year %}
                {% if previous_year %}
                                <a href="{% url 'year' year=previous_year|date:'Y' %}">{{ previous_year|date:'Y' }}</a>
                {% endif %}
                {% if next_year %}
                                <a href="{% url 'year' year=next_year|date:'Y' %}">{{ next_year|date:'Y' }}</a>
                {% endif %}
            {% else %}
                {% now 'Y' as current_year %}
                                <a href="{% url 'year' year=current_year %}">{{ current_year }}</a>
            {% endif %}
                            </div>

            {% if googlemaps_api_key %}
                            <div id="map-canvas"></div>
            {% endif %}
                        </div>
                    </div>

                    <div class="col-4" id="right-box">
            {% if page_obj %}
                        <div class="container pagination">
                            showing {{ page_obj.object_list | length }} / {{ page_obj.paginator.count }} total
                        </div>
                {% if page_obj.paginator and page_obj.paginator.num_pages and page_obj.paginator.num_pages != 1 %}
                            <div class="container pagination">
                                <span class="step-links">
                    {% if page_obj.has_previous %}
                                    <a href="?page=1">&laquo; first</a>
                                    <a href="?page={{ page_obj.previous_page_number }}">prev</a>
                    {% endif %}
                                    <span class="current">
                                        page {{ page_obj.number }} / {{ page_obj.paginator.num_pages }}
                                    </span>
                    {% if page_obj.has_next %}
                                    <a href="?page={{ page_obj.next_page_number }}">next</a>
                                    <a href="?page={{ page_obj.paginator.num_pages }}">last &raquo;</a>
                    {% endif %}
                                </span>
                            </div>
                {% endif %}
            {% endif %}
                        <ol class="container list-group" id="seizure-list">
                        </ol>
                    </div>
        {% else %}
            No seizures found.
        {% endif %}
                </div>
            </div>
        </main>
    </body>
</html>
