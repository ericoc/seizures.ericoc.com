{% extends "layout.html.djt" %}
{% block scripts %}
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="">
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    {% if seizures %}
        {% if device_icons %}{{ device_icons | json_script:"device-icons" }}{% endif %}
        {{ seizures | json_script:"seizures" }}
    {% endif %}
    {% if search_form %}
        <script>
            function chooseDate () { document.getElementById("search-form").submit(); };
        </script>
    {% endif %}
{% endblock scripts %}
{% block main %}
                <header>
    {% if seizures %}
                  <!-- Pagination Links -->
                    <ul class="list-inline">
        {% if previous_day or next_day %}
                      <!-- Day -->
                        <li class="list-inline-item" style="padding: 0 2.5rem;">
                {% if previous_day %}
                            <a href="{% url "day" year=previous_day|date:"Y" month=previous_day|date:"m" day=previous_day|date:"j" %}">{{ previous_day }}</a>
                {% endif %}
                {% if previous_day and next_day %}&dash;{% endif %}
                {% if next_day %}
                            <a href="{% url "day" year=next_day|date:"Y" month=next_day|date:"m" day=next_day|date:"j" %}">{{ next_day }}</a>
                {% endif %}
                        </li>
        {% endif %}
                      <!-- Month -->
                        <li class="list-inline-item" style="padding: 0 2.5rem;">
        {% if previous_month or next_month %}
            {% if previous_month %}
                            <a href="{% url "month" year=previous_month|date:"Y" month=previous_month|date:"m" %}">{{ previous_month|date:"F Y" }}</a>
            {% endif %}
            {% if previous_month and next_month %}&dash;{% endif %}
            {% if next_month %}
                            <a href="{% url "month" year=next_month|date:"Y" month=next_month|date:"m" %}">{{ next_month|date:"F Y" }}</a>
            {% endif %}
        {% else %}
            {% now "Y" as current_year %}
            {% now "m" as current_month %}
                            <a href="{% url "month" year=current_year month=current_month %}">{% now "F" %} {{ current_year }}</a>
        {% endif %}
                        </li>

                      <!-- Year -->
                        <li class="list-inline-item" style="padding: 0 2.5rem;">
        {% if previous_year or next_year %}
            {% if previous_year %}
                            <a href="{% url "year" year=previous_year|date:"Y" %}">{{ previous_year|date:"Y" }}</a>
            {% endif %}
            {% if previous_year and next_year %}&dash;{% endif %}
            {% if next_year %}
                            <a href="{% url "year" year=next_year|date:"Y" %}">{{ next_year|date:"Y" }}</a>
            {% endif %}
        {% else %}
            {% now "Y" as current_year %}
                            <a href="{% url "year" year=current_year %}">{{ current_year }}</a>
        {% endif %}
                        </li>
                        <li class="list-inline-item" style="padding: 0 3rem;">
        {% if search_form %}
                            <form method="post" id="search-form" action="{% url "index" %}">
                                {{ search_form.as_div }}
                                {% csrf_token %}
                            </form>
        {% endif %}
                        </li>
                    </ul>
                </header>

                <nav class="card" id="seizures-card" style="width: 25vw; height: 75vh;"></nav>
                <section style="width: 70vw; height: 75vh;">
                    <section id="map-canvas" style="height: 100%; width: 100%;"></section>
                    <footer class="list-inline">
        {% if request.user.is_staff %}
                        <a class="list-inline-item" href="{% url "admin:index" %}" target="_blank" title="Administration">Administration</a>
        {% endif %}
                        <code class="list-inline-item" title="{% now "r" %}" style="padding: 0 3rem;">
                            <time datetime="{% now "c" %}">{% now "r" %}</time>
                        </code>
                        <a class="list-inline-item" href="{% url "logout" %}" title="Log out">Log out</a>
                    </footer>
                </section>

            <script>

                // Parse JSON containing device icons, and seizure data.
                const deviceIcons = JSON.parse(document.getElementById("device-icons").textContent);
                const seizureData = JSON.parse(JSON.parse(document.getElementById("seizures").textContent));

                // Start seizure navigation list items, with count header.
                const seizuresAll = Object.values(seizureData);
                const seizureCount = seizuresAll.length;

                const cardHeader = document.createElement("h5");
                cardHeader.classList.add("card-header");
                cardHeader.classList.add("text-center");
                var countText = `${seizureCount.toLocaleString("en-US")} seizure`;
                if (seizureCount > 1) { countText += "s"; };
                document.title += ` ${countText}`;
                cardHeader.appendChild(document.createTextNode(countText));
                cardHeader.title = countText;

                const seizuresCard = document.getElementById("seizures-card");
                seizuresCard.appendChild(cardHeader);

                const seizureList = document.createElement("ul");
                seizureList.classList.add("card-body");
                seizureList.classList.add("overflow-scroll");

                // Start with empty map markers, latitudes, and longitudes.
                const markers = [];
                const latitudes = [];
                const longitudes = [];

                // Create the map (using Leaflet).
                const map = L.map("map-canvas");
                L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", { attribution: "&copy; OpenStreetMap", className: "map-tiles"}).addTo(map);

                // Loop through each seizure JSON object.
                const gmapsURL = "https://www.google.com/maps/search/?api=1&query=";
                for (const seizure of seizuresAll) {

                    // Get seizure icon and parse timestamp.
                    const deviceIcon = deviceIcons[seizure.fields.device_type];
                    const jsDate = new Date(seizure.pk);
                    const titleDate = jsDate.toLocaleTimeString("en-us", { weekday: "short", year: "numeric", month: "short", day: "numeric" });

                    // List linked time and device type icon, which opens map marker popup.
                    const unixTime = jsDate.getTime();
                    const listNode = document.createElement("li");
                    listNode.classList.add("list-group-item");
                    listNode.classList.add("card-text");
                    listNode.onclick = function() { window.location.href = `#${unixTime}`; markers[unixTime].openPopup(); };
                    listNode.id = unixTime;
                    listNode.appendChild(document.createTextNode(deviceIcon));

                    const linkNode = document.createElement("a");
                    linkNode.appendChild(document.createTextNode(titleDate));
                    linkNode.classList.add("link-offset-2");
                    linkNode.classList.add("link-offset-3-hover");
                    linkNode.classList.add("link-underline");
                    linkNode.classList.add("link-underline-opacity-0");
                    linkNode.classList.add("link-underline-opacity-75-hover");
                    linkNode.title = `${deviceIcon} ${titleDate}`;
                    linkNode.href = `#${unixTime}`;
                    linkNode.onclick = function() { markers[unixTime].openPopup(); };

                    listNode.appendChild(linkNode);
                    seizureList.appendChild(listNode);

                    // Append coordinates to arrays, for bounds calculation via minimum and maximum later.
                    latitudes.push(Number(seizure.fields.latitude));
                    longitudes.push(Number(seizure.fields.longitude));

                    // Create a table to display within each marker popup.
                    var contentString = '<table class="table">';
                    contentString += `<tr title="${titleDate}">`;
                    contentString += `<th class="text-center fw-bold" colspan="2">${deviceIcon} <a href="#${unixTime}"><time datetime="${jsDate.toISOString()}">${titleDate}</a></th>`;
                    contentString += "</tr>";

                    // Address links to Google Maps.
                    if (seizure.fields.address) {
                        addressParsed = seizure.fields.address.replace(/\n/g, ", ");
                        contentString += `<tr title="Address: ${addressParsed}">`;
                        contentString += '<td class="fw-bold">Address</td>';
                        contentString += `<td><a href="${gmapsURL}${addressParsed}" target="_blank" title="Google Maps: ${addressParsed}">${addressParsed}</a></td>`;
                        contentString += "</tr>";
                    };

                    // Altitude.
                    if (seizure.fields.altitude) {
                        altitudeParsed = `${parseFloat(seizure.fields.altitude).toFixed(2)} ft`;
                        contentString += `<tr title="Altitude: ${altitudeParsed}">`;
                        contentString += `<td class="fw-bold">Altitude</td><td>${altitudeParsed}</td>`;
                        contentString += "</tr>";
                    };

                    // Battery.
                    if (seizure.fields.battery) {
                        batteryParsed = `${parseFloat(seizure.fields.battery).toFixed(2)}%`;
                        contentString += `<tr title="Battery: ${batteryParsed}">`;
                        contentString += `<td class="fw-bold">Battery</td><td>${batteryParsed}</td>`;
                        contentString += "</tr>";
                    };

                    // Brightness.
                    if (seizure.fields.brightness) {
                        brightnessParsed = `${parseFloat(seizure.fields.brightness*100).toFixed(2)}%`;
                        contentString += `<tr title="Brightness: ${brightnessParsed}">`;
                        contentString += `<td class="fw-bold">Brightness</td><td>${brightnessParsed}</td>`;
                        contentString += "</tr>";
                    };

                    // GPS Coordinates link to Google Maps.
                    contentString += `<tr title="Coordinates: ${seizure.fields.latitude}, ${seizure.fields.longitude}">`;
                    contentString += '<td class="fw-bold">Coordinates</td>';
                    contentString += `<td><a href="${gmapsURL}${seizure.fields.latitude},${seizure.fields.longitude}" target="_blank" title="Google Maps: ${seizure.fields.latitude}, ${seizure.fields.longitude}">${seizure.fields.latitude}, ${seizure.fields.longitude}</a></td>`;
                    contentString += "</tr>";

                    // SSID.
                    if (seizure.fields.ssid) {
                        contentString += `<tr title="SSID: ${seizure.fields.ssid}">`;
                        contentString += `<td class="fw-bold">SSID</td><td>${seizure.fields.ssid}</td>`;
                        contentString += "</tr>";
                    };

                    // UTC date.
                    const utcDate = jsDate.toUTCString();
                    contentString += `<tr title="UTC: ${utcDate}">`;
                    contentString += `<td class="fw-bold">UTC</td><td><time datetime="${jsDate.toISOString()}">${utcDate}</time></td>`;
                    contentString += "</tr>";

                    // Volume.
                    if (seizure.fields.volume) {
                        volumeParsed = `${parseFloat(seizure.fields.volume*100).toFixed(2)}%`;
                        contentString += `<tr title="Volume: ${volumeParsed}">`;
                        contentString += `<td class="fw-bold">Volume</td><td>${volumeParsed}</td>`;
                        contentString += "</tr>";
                    };

                    // Finish marker table popup.
                    contentString += "</table>";

                    // Create map marker for each seizure.
                    markers[unixTime] = L.marker([Number(seizure.fields.latitude), Number(seizure.fields.longitude)]).addTo(map).bindPopup(contentString).openPopup();
                };

                seizuresCard.appendChild(seizureList);

        {% if since_when %}
                // Add "since <time>" text, if available.
                const sinceText = "since {{ since_when }} ({{ since_when | timesince }})";
                document.title += ` ${sinceText}`;
                const sinceFooter = document.createElement("h6");
                sinceFooter.classList.add("card-footer");
                sinceFooter.classList.add("fst-italic");
                sinceFooter.classList.add("text-body-secondary");
                sinceFooter.title = sinceText;
                sinceFooter.appendChild(document.createTextNode(sinceText));
                seizuresCard.appendChild(sinceFooter);
        {% endif %}

                // Set map bounds using minimum and maximum seizure coordinates.
                map.fitBounds([[Math.min(...latitudes), Math.min(...longitudes)], [Math.max(...latitudes), Math.max(...longitudes)]]);

                // Open popup for marker if referenced by URL anchor.
                if (window.location.hash.substr(1)) {
                    const anchor = window.location.hash.substr(1);
                    if (markers[anchor]) { markers[anchor].openPopup(); };
                };

                // Open popup if single marker.
                if (seizureCount == 1) { markers[Object.keys(markers)[0]].openPopup(); };

            </script>
    {% else %}
            No seizures found.
    {% endif %}
{% endblock main %}
    </body>
</html>
