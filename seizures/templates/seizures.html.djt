{% load bootstrap5 %}
{% load static %}
<!DOCTYPE html>
<html lang="en">

    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8">
        <meta name="robots" content="noimageindex, nofollow, nosnippet">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="{% static 'favicon.ico' %}" rel="shortcut icon" type="image/vnd.microsoft.icon">
        <link href="{% static 'style.css' %}" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="">
        {% bootstrap_css %}
        <title>Eric's Seizures</title>
        {% bootstrap_javascript %}
    {% if seizures %}
        {% if device_icons %}
        {{ device_icons | json_script:"device-icons" }}
        {% endif %}
        {{ seizures | json_script:"seizures" }}
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    {% endif %}
    </head>
    <body>

        <nav class="navbar navbar-expand-lg">
            <div class="container-fluid">
                <a href="#" id="logo"></a>
                <a class="navbar-brand text-primary" href="{% url 'index' %}" id="logo-text">Eric's Seizures</a>
                <a href="#" id="logo-rev"></a>
            </div>
        </nav>

        <main class="container" id="content">
            <div class="container">

                <div class="row">
        {% if seizures %}
                    <div class="col-8">
                        <div class="container" id="left-box">
            {% if previous_day or next_day %}
                            <div class="container">
                {% if previous_day %}
                                <a href="{% url 'day' year=previous_day|date:'Y' month=previous_day|date:'m' day=previous_day|date:'j' %}">{{ previous_day }}</a>
                {% endif %}
                {% if previous_day and next_day %}--{% endif %}
                {% if next_day %}
                                <a href="{% url 'day' year=next_day|date:'Y' month=next_day|date:'m' day=next_day|date:'j' %}">{{ next_day }}</a>
                {% endif %}
                            </div>
            {% endif %}

                            <div class="container">
            {% if previous_month or next_month %}
                {% if previous_month %}
                                <a href="{% url 'month' year=previous_month|date:'Y' month=previous_month|date:'m' %}">{{ previous_month|date:'F Y' }}</a>
                {% endif %}
                {% if next_month %}
                                <a href="{% url 'month' year=next_month|date:'Y' month=next_month|date:'m' %}">{{ next_month|date:'F Y' }}</a>
                {% endif %}
            {% else %}
                {% now 'Y' as current_year %}
                {% now 'm' as current_month %}
                                <a href="{% url 'month' year=current_year month=current_month %}">{% now 'F' %} {{ current_year }}</a>
            {% endif %}
                            </div>

                            <div class="container-fluid">
            {% if previous_year or next_year %}
                {% if previous_year %}
                                <a href="{% url 'year' year=previous_year|date:'Y' %}">{{ previous_year|date:'Y' }}</a>
                {% endif %}
                {% if next_year %}
                                <a href="{% url 'year' year=next_year|date:'Y' %}">{{ next_year|date:'Y' }}</a>
                {% endif %}
            {% else %}
                {% now 'Y' as current_year %}
                                <a href="{% url 'year' year=current_year %}">{{ current_year }}</a>
            {% endif %}
                            </div>
                            <div id="map-canvas"></div>
                        </div>
                    </div>

                    <div class="col-4" id="right-box">
            {% if page_obj %}
                        <div class="container pagination">
                            showing {{ page_obj.object_list | length }} / {{ page_obj.paginator.count }} total
                        </div>
                {% if page_obj.paginator and page_obj.paginator.num_pages and page_obj.paginator.num_pages != 1 %}
                            <div class="container pagination">
                                <span class="step-links">
                    {% if page_obj.has_previous %}
                                    <a href="?page=1">&laquo; first</a>
                                    <a href="?page={{ page_obj.previous_page_number }}">prev</a>
                    {% endif %}
                                    <span class="current">
                                        page {{ page_obj.number }} / {{ page_obj.paginator.num_pages }}
                                    </span>
                    {% if page_obj.has_next %}
                                    <a href="?page={{ page_obj.next_page_number }}">next</a>
                                    <a href="?page={{ page_obj.paginator.num_pages }}">last &raquo;</a>
                    {% endif %}
                                </span>
                            </div>
                {% endif %}
            {% endif %}
                        <nav class="container list-group" id="seizure-list">
                        </nav>
                    </div>
                    <script>

                        // Parse the JSON containing device icons, and seizure data
                        const deviceIcons = JSON.parse(document.getElementById('device-icons').textContent);
                        const seizureData = JSON.parse(JSON.parse(document.getElementById('seizures').textContent));

                        // Start with empty markers, latitudes, and longitudes
                        const markers = [];
                        const latitudes = [];
                        const longitudes = [];

                        // Create the map (using Leaflet)
                        const map = L.map('map-canvas');
                        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '&copy; OpenStreetMap'
                        }).addTo(map);

                        // Loop through each seizure JSON object
                        for (const seizure of Object.values(seizureData)) {

                            // Get seizure icon and parse timestamp to JS Date
                            const deviceIcon = deviceIcons[seizure.fields.device_type];
                            const jsDate = new Date(seizure.pk);
                            const titleDate = jsDate.toLocaleTimeString(
                                'en-us', {
                                    weekday: 'long',
                                    year: 'numeric',
                                    month: 'short',
                                    day: 'numeric'
                                }
                            );

                            // List device type and timestamp as title
                            const titleText = seizure.fields.device_type + ' ' + deviceIcon + ' ' + titleDate;
                            const unixTime = jsDate.getTime();
                            const utcDate = jsDate.toUTCString();
                            const listNode = document.createElement('li');
                            listNode.className = 'list-group-item';
                            const textNode = document.createTextNode(titleText);
                            const linkNode = document.createElement('a');
                            linkNode.appendChild(textNode);
                            linkNode.title = titleText;
                            linkNode.href = '#' + unixTime;
                            linkNode.onclick = function() { markers[unixTime].openPopup(); };
                            listNode.appendChild(linkNode);
                            document.getElementById('seizure-list').appendChild(listNode);

                            // Append coordinates to latitudes and longitudes, for bounds min/max later
                            latitudes.push(Number(seizure.fields.latitude));
                            longitudes.push(Number(seizure.fields.longitude));

                            // Create a table to display in each marker popup
                            var contentString = '<table class="table">';
                            contentString += '<tr>';
                            contentString += '<th class="text-center" colspan="2" title="Time: ' + titleDate + '"><a href="#' + unixTime + '">' + titleDate + '</a>' + deviceIcon + '</th>';
                            contentString += '</tr>';
                            if (seizure.fields.address) {
                                contentString += '<tr title="Address: ' + seizure.fields.address + '"><td>Address</td><td>' + seizure.fields.address + '</td></tr>';
                            };
                            if (seizure.fields.altitude) {
                                contentString += '<tr title="Altitude: ' + parseFloat(seizure.fields.altitude) + ' ft"><td>Altitude</td><td>' + parseFloat(seizure.fields.altitude) + ' ft</td></tr>';
                            };
                            if (seizure.fields.battery) {
                                contentString += '<tr title="Battery: ' + parseFloat(seizure.fields.battery) + '%"><td>Battery</td><td>' + parseFloat(seizure.fields.battery) + '%</td></tr>';
                            };
                            if (seizure.fields.brightness) {
                                contentString += '<tr title="Brightness: ' + parseFloat(seizure.fields.brightness*100) + '%"><td>Brightness</td><td>' + parseFloat(seizure.fields.brightness*100) + '%</td></tr>';
                            };
                            contentString += '<tr title="Coordinates: ' + seizure.fields.latitude + ', ' + seizure.fields.longitude + '"><td>Coordinates</td><td>' + seizure.fields.latitude + ', ' + seizure.fields.longitude + '</td></tr>';
                            if (seizure.fields.ssid) {
                                contentString += '<tr title="SSID: ' + seizure.fields.ssid + '"><td>SSID</td><td>' + seizure.fields.ssid + '</td></tr>';
                            };
                            contentString += '<tr title="UTC: ' + utcDate + '"><td>UTC</td><td>' + utcDate + '</td></tr>';
                            if (seizure.fields.volume) {
                                contentString += '<tr title="Volume: ' + parseFloat(seizure.fields.volume*100) + '%"><td>Volume</td><td>' + parseFloat(seizure.fields.volume*100) + '%</td></tr>';
                            };
                            contentString += '</table>';

                            // Create map marker for each seizure
                            markers[unixTime] = L.marker(
                                [
                                    Number(seizure.fields.latitude),
                                    Number(seizure.fields.longitude)
                                ]
                            ).addTo(map).bindPopup(contentString).openPopup();
                        };

                        // Set map bounds using min/max coordinates
                        map.fitBounds(
                            [
                                [
                                    Math.min(...latitudes),
                                    Math.min(...longitudes)
                                ],
                                [
                                    Math.max(...latitudes),
                                    Math.max(...longitudes)
                                ]
                            ]
                        );

                        // Open popup for marker if referenced by URL anchor
                        if (window.location.hash.substr(1)) {
                            const anchor = window.location.hash.substr(1);
                            if (markers[anchor]) {
                                markers[anchor].openPopup();
                            };
                        };

                        // Open popup if single marker
                        if (Object.keys(markers).length == 1) {
                            markers[Object.keys(markers)[0]].openPopup();
                        };

                    </script>
        {% else %}
            No seizures found.
        {% endif %}
                </div>
            </div>
        </main>
    </body>
</html>
